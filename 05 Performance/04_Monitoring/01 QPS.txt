Queries per second (QPS) is a metric that measures the number of database queries executed per second. It's an important performance indicator for database systems, reflecting their ability to handle workloads efficiently. Here's how to measure QPS in PostgreSQL and MongoDB:

**PostgreSQL:**

1. Using pg_stat_statements extension:

Enable the pg_stat_statements extension if not already enabled:

```sql
CREATE EXTENSION pg_stat_statements;
```

Then query the extension to get QPS:

```sql
SELECT sum(calls) / extract(epoch from now() - pg_postmaster_start_time()) AS qps 
FROM pg_stat_statements;
```

This gives you an average QPS since the server started[1].

2. Using external monitoring tools:

Tools like pgBadger or pg_stat_monitor can provide more detailed QPS metrics over specific time periods[1].

**MongoDB:**

1. Using serverStatus command:

Run the serverStatus command and look at the opcounters section:

```javascript
db.serverStatus().opcounters
```

This gives you the number of operations since the server started. To calculate QPS, you'd need to run this command twice and divide the difference by the time elapsed[1].

2. Using MongoDB Compass:

MongoDB Compass, the official GUI for MongoDB, provides real-time performance metrics including QPS[1].

3. Using mongotop:

The mongotop utility can show you the number of read and write operations per second for each collection[1].

For both databases, it's important to note:

- QPS can vary significantly based on workload, so it's best to measure during peak usage times.
- For more accurate results, measure over longer periods and calculate averages.
- Consider using specialized database monitoring tools for continuous monitoring and historical data[1].

Remember, while QPS is important, it shouldn't be the only metric you consider. Other factors like query complexity, response time, and resource utilization are also crucial for overall database performance assessment[1][2].

Citations:
[1] https://info.enterprisedb.com/rs/069-ALB-339/images/PostgreSQL_MongoDB_Benchmark-WhitepaperFinal.pdf
[2] https://www.scielo.org.mx/scielo.php?pid=S1405-55462020000401461&script=sci_arttext
[3] https://stackoverflow.com/questions/42496010/database-benchmarking-should-the-data-transfer-protocol-latency-be-included
[4] https://www.percona.com/blog/millions-queries-per-second-postgresql-and-mysql-peaceful-battle-at-modern-demanding-workloads/
[5] https://www.timescale.com/learn/postgresql-performance-tuning-how-to-size-your-database/
